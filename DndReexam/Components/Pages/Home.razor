@page "/home"
@inject WorktimeService WorktimeService
@inject IJSRuntime JS
@using MudBlazor

<PageTitle>Home</PageTitle>

@if (worktimeSummary == null || worktimeRaw == null)
{
    <MudProgressCircular Indeterminate="true" />
}
@* else if (worktimeSummary.Count == 0) *@
else
{
    <div class="grid-container">

    <div class="first-row main-content">
        <WorktimeChart
            Series="@chartSeries" 
            Labels="@chartLabels" 
            Width="100%" 
            Height="350px"
        />
    </div>
    <div class="first-row side-content">
        Sidebar (20%)
    </div>

    <!-- Second Row -->
    <div class="second-row">
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th aria-label="Start time">Start</th>
                    <th aria-label="End time">End</th>
                    <th>Task</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var workRecord in worktimeRaw)
                {
                    <tr>
                        <!-- Print date in YYYY-MM-DD, for example -->
                        <td>@(workRecord.Start.ToString("yyyy-MM-dd"))</td>
                        
                        <!-- Print start time in HH:mm (24-hour) format -->
                        <td>@(workRecord.Start.ToString("HH:mm"))</td>
                        
                        <!-- Print end time in HH:mm (24-hour) format -->
                        <td>@(workRecord.End.ToString("HH:mm"))</td>
                        
                        <!-- Task as-is -->
                        <td>@workRecord.Task</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

}

@code {
    private List<WorktimeSummary>? worktimeSummary;
    private List<WorktimeRaw>? worktimeRaw;
    @* private double[] chartData = Array.Empty<double>(); *@
    private int employeeId = 1;
    private string[] chartLabels = Array.Empty<string>();
    private List<ChartSeries> chartSeries = new(); // <-- store chart series here

    protected override async Task OnInitializedAsync()
    {
        worktimeSummary = await WorktimeService.GetWorktimeSummaryAsync(employeeId);
        worktimeRaw = await WorktimeService.GetWorktimeRawAsync(employeeId);

    if (worktimeSummary is { Count: > 0 })
        {
            // Labels for the X-Axis
            chartLabels = worktimeSummary.Select(x => x.Date).ToArray();

            // Build the chart series (one series for "TotalHours")
            var totalHoursData = worktimeSummary.Select(x => x.TotalHours).ToArray();

            chartSeries = new List<ChartSeries>
            {
                new ChartSeries
                {
                    Name = "Worktime",
                    Data = totalHoursData
                }
            };
        }
    }

}