@page "/home"
@inject WorktimeService WorktimeService
@inject AuthService AuthService
@inject IJSRuntime JS
@using MudBlazor
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Home</PageTitle>

@if (worktimeSummary == null || worktimeRaw == null || todayWorktimeRaw == null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <div class="grid-container">
        <!-- First Row -->
        <div class="first-row main-content">
            <WorktimeChart
                Series="@chartSeries" 
                Labels="@chartLabels" 
                Width="100%" 
                Height="350px"
            />
        </div>
        <div class="first-row side-content">
            <h3><b>Today:</b></h3>
            <table class="table">
                <thead>
                    <tr>
                        <th aria-label="Start time">Start</th>
                        <th aria-label="End time">End</th>
                        <th>Task</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var workRecord in worktimeRaw)
                    {
                        <tr>
                            <td>@(workRecord.Start.ToString("HH:mm"))</td>
                            <td>@(workRecord.End.ToString("HH:mm"))</td>
                            <td>@workRecord.Task</td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>

        <!-- Second Row -->
        <div class="second-row">
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th aria-label="Start time">Start</th>
                        <th aria-label="End time">End</th>
                        <th>Task</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var workRecord in worktimeRaw)
                    {
                        <tr>
                            <td>@(workRecord.Start.ToString("yyyy-MM-dd"))</td>
                            <td>@(workRecord.Start.ToString("HH:mm"))</td>
                            <td>@(workRecord.End.ToString("HH:mm"))</td>
                            <td>@workRecord.Task</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        </div>
}


@code {
    private List<WorktimeSummary>? worktimeSummary;
    private List<WorktimeRaw>? worktimeRaw;
    private List<WorktimeRaw>? todayWorktimeRaw;
    private string[] chartLabels = Array.Empty<string>();
    private List<ChartSeries> chartSeries = new();
    private string token;
    private bool hasCheckedUser = false;
    private const string TODAY = "2024-02-03";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasCheckedUser)
        {
            token = await AuthService.GetTokenAsync();
            worktimeSummary = await WorktimeService.GetWorktimeSummaryAsync(token);
            worktimeRaw = await WorktimeService.GetWorktimeRawAsync(token);
            todayWorktimeRaw = await WorktimeService.GetWorktimeRawTodayAsync(token, TODAY);
			Console.WriteLine(token);
            // Now retrieve worktime data using the token

            if (worktimeSummary is { Count: > 0 })
            {
                // Build labels for the X-Axis from the summary dates
                chartLabels = worktimeSummary.Select(x => x.Date).ToArray();

                // Prepare the chart series data (e.g., total hours worked)
                var totalHoursData = worktimeSummary.Select(x => x.TotalHours).ToArray();

                chartSeries = new List<ChartSeries>
                {
                    new ChartSeries
                    {
                        Name = "Worktime",
                        Data = totalHoursData
                    }
                };
            }
            hasCheckedUser = true;
            StateHasChanged(); // Re-render UI after checking role

    }
    

        
    }

}