@page "/login"
@using DndReexam.Components.Layout
@layout LoginLayout
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using DndReexam.Services
@using DndReexam.Models
@namespace DndReexam.Components.Pages
@inject IHttpClientFactory ClientFactory
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="p-4" style="width: 100%; max-width: 400px;">

        <div style="display: flex; justify-content: center;">
            <img src="AA-Company-Logo.jpg" alt="AA Company Logo">
        </div>
        
        <h2 class="text-center mb-4">Login</h2>

        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" FormName="loginForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Employee ID Input -->
            <div class="form-group">
                <label for="employeeId">Employee ID</label>
                <InputText id="employeeId" class="form-control" @bind-Value="loginModel.EmployeeId" placeholder="(e.g. 123456)" style="font-size: 18px;" />
            </div>

            <!-- Password Input -->
            <div class="form-group mt-3">
                <label for="password">Password</label>
                <InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" placeholder="(e.g. 1234)" style="font-size: 18px;" />
            </div>

            <!-- Error Label -->
            <div class="text-danger">@errorLabel</div>

            <!-- Submit Button -->
            <button type="submit" class="btn btn-primary w-100 mt-4" style="font-size: 20px;">Login</button>
        </EditForm>
    </div>
</div>

<!-- TEST SEGMENT 
code {
    private PersonBaseDTO loginModel { get; set; } = new PersonBaseDTO
    {
        EmployeeId = string.Empty,
        Password = string.Empty
    };

    private string errorLabel = "";

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Testing AuthService.LoginAsync directly...");

        // Hardcoded credentials for testing
        var testEmployeeId = "admin";
        var testPassword = "admin123";

        // Call LoginAsync directly
        var role = await AuthService.LoginAsync(testEmployeeId, testPassword);

        if (string.IsNullOrEmpty(role))
        {
            Console.WriteLine("Direct LoginAsync test: Login failed (Invalid credentials).");
        }
        else
        {
            Console.WriteLine($"Direct LoginAsync test: Login successful. Role: {role}");
        }
    }

    private async Task HandleLogin()
    { 
        errorLabel = "";

        Console.WriteLine("HandleLogin called");
        Console.WriteLine($"EmployeeId entered: {loginModel.EmployeeId}");
        Console.WriteLine($"Password entered: {loginModel.Password}");

        try
        {
            // Call AuthService to validate login
            var role = await AuthService.LoginAsync(loginModel.EmployeeId, loginModel.Password);

            if (!string.IsNullOrEmpty(role))
            {
                Console.WriteLine($"Login successful. Role: {role}");
                await LocalStorage.SetItemAsync("userRole", role);
                NavigationManager.NavigateTo("/home");
            }
            else
            {
                Console.WriteLine("Invalid credentials provided.");
                errorLabel = "Invalid Employee ID or Password. Please try again.";
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Login error: {e.Message}");
            errorLabel = $"Error: {e.Message}";
        }
    }
} -->


@code {
    [SupplyParameterFromForm]
    private PersonBaseDTO loginModel { get; set; } = new PersonBaseDTO();
    private string errorLabel = "";

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/home");
        }
    }

    private async Task HandleLogin()
    { 
        errorLabel = "";

        try
        {
            await AuthService.LoginAsync(loginModel.EmployeeId, loginModel.Password);
            NavigationManager.NavigateTo("/home");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = $"Error: {e.Message}";
        }
    }
    
}
