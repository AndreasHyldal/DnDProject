@page "/login"
@using DndReexam.Models
@using DndReexam.Services
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" placeholder="Enter your email" />
    </div>

    <div class="form-group mt-3">
        <label for="password">Password</label>
        <InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" placeholder="Enter your password" />
    </div>

    <div class="text-danger">@errorLabel</div>

    <button type="submit" class="btn btn-primary mt-3">Login</button>
</EditForm>

@code {
    private PersonBaseDTO loginModel { get; set; } = new PersonBaseDTO
    {
        Email = string.Empty,
        Password = string.Empty
    };

    private string errorLabel = "";

    private async Task HandleLogin()
{
    errorLabel = "";

    try
    {
        // Call AuthService to validate login and retrieve the JWT token
        var loginResponse = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);

       // if (!string.IsNullOrEmpty(loginResponse?.Token))
       // {
            // Store the token and user role in local storage
       //     await LocalStorage.SetItemAsync("authToken", loginResponse.Token);
       //     await LocalStorage.SetItemAsync("userRole", loginResponse.Role);

       //      Redirect to the homepage
       //     NavigationManager.NavigateTo("/home");
       // }
       // else
       // {
       //     errorLabel = "Invalid email or password. Please try again.";
       // }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Login error: {ex.Message}");
        errorLabel = "An error occurred during login. Please try again.";
    }
}

}
