@page "/login"
@using DndReexam.Components.Layout
@rendermode @(new InteractiveServerRenderMode(prerender: true))
@layout LoginLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@* @inject AuthService AuthService *@

<h3>Login</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<div class="form-group">
    <label>Email:</label>
    <input type="email" @bind="loginModel.Email" class="form-control" />

    <label>Password:</label>
    <input type="password" @bind="loginModel.Password" class="form-control" />

    <button @onclick="HandleLogin" class="btn btn-primary">Login</button>
</div>

@code {
    private LoginRequest loginModel = new();
    private string? ErrorMessage;

    private async Task HandleLogin()
    {
        @* var token = await AuthService.GetTokenAsync();
        Console.WriteLine($"Token: {token}"); *@

        ErrorMessage = null;

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<AuthResponse>();
                
                if (result != null && !string.IsNullOrEmpty(result.Token))
                {
                    await LocalStorage.SetItemAsync("jwt_token", result.Token);
                    Navigation.NavigateTo("/home");
                }
            }
            else
            {
                ErrorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"error {ex.Message}");
            ErrorMessage = "Error connecting to server.";
        }
    }

    private class LoginRequest
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private class AuthResponse
    {
        public string Token { get; set; } = string.Empty;
    }
}
